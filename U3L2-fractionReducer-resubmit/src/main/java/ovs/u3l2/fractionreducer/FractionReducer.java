




package ovs.u3l2.fractionreducer;

import javax.swing.*;// For JFrame, JButton, JTextArea, JOptionPane, etc.
import javax.swing.event.DocumentEvent;//This is for document event handling
import javax.swing.event.DocumentListener;//to listen to changes in the text field
import java.awt.*;// For layout managers and other components basically
import javax.swing.border.LineBorder;//to change the border of different parts
import javax.swing.JOptionPane;//to show the user message windows
import javax.swing.BorderFactory;//For the border live validation
import javax.swing.border.Border;//Also for the border live validation
import java.awt.event.WindowAdapter;//to handle window events in this case the X
import java.awt.event.WindowEvent;//to capture any window events such as opening etc.
import java.awt.Dimension;//To handle the dimension components
import javax.swing.JFrame;;//To handle the JFrame


public class FractionReducer extends javax.swing.JFrame {
    Border defaultBorder; //this is to hold the default border basically
    
    /**
     * Creates new form FractionReducer
     */
    public FractionReducer() {
        initComponents();
        //This is for the live input validation where it turns green or red 
         addInputValidation(textNumerator);
        addInputValidation(textDenominator);
        //This just stores the default borders of the text fields 
        defaultBorder = textNumerator.getBorder();
         // Initialize the JFrame settings inside the constructor
        setTitle("Fraction Reducer"); // this will set the title of the JFrame
        setSize(800, 600);  // Set the window size
        setMinimumSize(new Dimension(600, 400));  // Set the minimum window size
        setMaximumSize(new Dimension(1200, 800));  // Set the maximum window size
        setResizable(false);  //This will prevent users from resizing the window
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true); // just make the frame visible
        
        //This just sets the default close operation to do nothing
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);

    // Add the WindowListener to do the validation for the X 
    addWindowListener(new WindowAdapter() {
        @Override
    public void windowClosing(WindowEvent e) {
        // Show the confirmation dialog when user clicks the 'X'
        int response = JOptionPane.showConfirmDialog(
                FractionReducer.this,
                "Are you sure you want to exit?",
                "Confirm Exit",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        // If the user clicks yes, then exit the program
        if (response == JOptionPane.YES_OPTION) {
            System.exit(0); // Exit the program
        }
        // If no, just do nothing and keep the application running the same way
    }
});
    
    }

    private void addInputValidation(JTextField textField) {
        //This here uses the document listeners 
        textField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) { validateInput(); }
            @Override
            public void removeUpdate(DocumentEvent e) { validateInput(); }
            @Override
            public void changedUpdate(DocumentEvent e) { validateInput(); }

            private void validateInput() {
                try {
                    //parses the input as an integer
                    Integer.parseInt(textField.getText());
                    //if its valid make it green
                    textField.setBorder(new LineBorder(Color.GREEN,2)); 
                } catch (NumberFormatException e) {
                    //if invalid make it red
                    textField.setBorder(new LineBorder(Color.RED,2)); 
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textNumerator = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textDenominator = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        textResult = new javax.swing.JTextField();
        btnDecimal = new javax.swing.JButton();
        textDecimal = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnMixed = new javax.swing.JButton();
        textMixed = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        btnSteps = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Fraction Reducer");

        jLabel2.setText("This program will reduce a fraction to lowest terms");

        jLabel3.setText("Enter the Numerator");

        textNumerator.setBackground(new java.awt.Color(204, 255, 204));

        jLabel4.setText("Enter the denominator");

        textDenominator.setBackground(new java.awt.Color(204, 255, 204));

        btnCalculate.setText("Reduce fraction");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        textResult.setEditable(false);
        textResult.setBackground(new java.awt.Color(153, 204, 255));

        btnDecimal.setText("Decimal ");
        btnDecimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecimalActionPerformed(evt);
            }
        });

        textDecimal.setEditable(false);
        textDecimal.setBackground(new java.awt.Color(153, 204, 255));

        jLabel5.setIcon(new javax.swing.ImageIcon("C:\\Users\\user\\OneDrive\\Pictures\\Screenshots\\Fractions.jpg")); // NOI18N

        btnMixed.setText("Mixed Fraction");
        btnMixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMixedActionPerformed(evt);
            }
        });

        textMixed.setEditable(false);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnSteps.setText("Show steps");
        btnSteps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStepsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(243, 243, 243)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(44, 44, 44))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(btnDecimal))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textResult, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(btnCalculate))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(textNumerator)
                                    .addGap(161, 161, 161)))
                            .addComponent(textDenominator, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMixed)
                            .addComponent(textMixed, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear)
                            .addComponent(btnSteps))
                        .addGap(104, 104, 104))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textNumerator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSteps))
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textDenominator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCalculate)
                    .addComponent(btnMixed))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textMixed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDecimal)
                        .addGap(18, 18, 18)
                        .addComponent(textDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnClear))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //This will just define a boolean variable to track if the reduction has been performed
    //so that the user can check their work or steps after it has been calculated
    private boolean isReduced = false;
    private int lastNumerator = 0;
private int lastDenominator = 0;
    
    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
           // TODO add your handling code here:
    // This is basically what actually resets the borders of the text fields to
    // borders without the color 
    isReduced = true;
    textNumerator.setBorder(defaultBorder);
    textDenominator.setBorder(defaultBorder);

    try {
        // This function just checks if the input fields are empty
        if (textNumerator.getText().isEmpty() || textDenominator.getText().isEmpty()) {
            // if it's empty, show the user an error message
            JOptionPane.showMessageDialog(null, "Please fill in both numerator and denominator.");
            return; // Exit the method
        }

        // Get the numerator and denominator from the text fields
        int numerator = Integer.parseInt(textNumerator.getText());
        int denominator = Integer.parseInt(textDenominator.getText());

        // this validates the denominator to prevent division by zero
        if (denominator == 0) {
            JOptionPane.showMessageDialog(null, "Denominator cannot be zero.");
            return; // Exit the method
        }

        // makes sure the denominator is positive and move the negative sign to the numerator if necessary
        if (denominator < 0) { 
            numerator = -numerator; // this moves the negative sign to the numerator
            denominator = -denominator; //this just will make the denominator positive
        }

        // Calculate the GCD using the recursive method
        int gcd = calculateGCD(numerator, denominator);

        // Reduce the fraction
        int reducedNumerator = numerator / gcd;
        int reducedDenominator = denominator / gcd;

        // make sure only the numerator is negative
        // The following code makes sure the denominator is positive
        if (reducedDenominator < 0) {
            reducedNumerator = -reducedNumerator; //this moves the negative sign to the numerator
            reducedDenominator = -reducedDenominator; // this makes sure the denominator is positive
        }

        // Display the result
        textResult.setText("Your reduced fraction is " + reducedNumerator + "/" + reducedDenominator);
    } catch (NumberFormatException e) {
        // If it isn't the correct data type, in this case integers, it shows the user
        // an error message
        JOptionPane.showMessageDialog(null, "Please enter valid integers.");
    }
}

// This is the other recursive function to calculate GCD
private int calculateGCD(int a, int b) {
    if (b == 0) {
        return a;  // So this is the base case where GCD(a, 0) is a
    }
    return calculateGCD(b, a % b);  // This is just the recursive call 


    
    
    }//GEN-LAST:event_btnCalculateActionPerformed
    
    private void btnDecimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecimalActionPerformed
        
       try {
        //This gets the numerator and denominator from the first input text fields
        int numerator = Integer.parseInt(textNumerator.getText());
        int denominator = Integer.parseInt(textDenominator.getText());

        // This just validates the denominator to prevent division by zero
        if (denominator == 0) {
            JOptionPane.showMessageDialog(null,"Denominator cannot be zero.");
            return; //Then exit the method
        }

        //This function here calculates the decimal value
        double decimalValue = (double) numerator / denominator;

        // Then just display the decimal value in the textDecimal field
        textDecimal.setText(String.format("%.2f", decimalValue)); //I just chose to format to 2 decimal places

    } catch (NumberFormatException e) {
        // If the input is not valid integers, it will show an error message
        JOptionPane.showMessageDialog(null,"Please enter valid integers.");
        
    } 
       
    }//GEN-LAST:event_btnDecimalActionPerformed

    private void btnMixedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMixedActionPerformed
    try {
    // This function just checks if the numerator or denominator fields are empty
    if (textNumerator.getText().isEmpty() || textDenominator.getText().isEmpty()) {
        // If it is, then show user an error message
        JOptionPane.showMessageDialog(null, "Please enter both a numerator and a denominator first.");
        return; // Then exit the method
    }

    // Then it will just get the numerator and denominator from the text fields
    int numerator = Integer.parseInt(textNumerator.getText());
    int denominator = Integer.parseInt(textDenominator.getText());

    // This just makes sure the denominator is not zero
    if (denominator == 0) {
        // If it is, then let user know
        JOptionPane.showMessageDialog(null, "Denominator cannot be zero.");
        return; // Exit the method
    }

    // Calculate the GCD to reduce the fraction later
    int gcd = calculateGCD(numerator, denominator);
    int reducedNumerator = numerator / gcd;
    int reducedDenominator = denominator / gcd;

    //see if the fraction is negative
    boolean isNegativeFraction = (reducedNumerator < 0) ^ (reducedDenominator < 0);// check if signs differ

    // Calculate the mixed number parts
    int wholeNumber = Math.abs(reducedNumerator / reducedDenominator);  // gets the absolute whole number
    int newNumerator = Math.abs(reducedNumerator % reducedDenominator);  // gets the remainder and make sure it's positive

    // If the fraction is negative, make the whole number negative, but keep numerator and denominator positive
    if (isNegativeFraction) {
        wholeNumber = -wholeNumber; // makes whole number negative
        //this makes sure the reduced numerator is positive
        reducedNumerator = Math.abs(reducedNumerator);
        reducedDenominator = Math.abs(reducedDenominator);
    }

    // Now this function checks if the numerator is smaller than the denominator
    if (wholeNumber == 0) {
        //if not a mixed fraction
        textMixed.setText("Not a mixed fraction ");
    } else {
        // Display the mixed fraction
        if (newNumerator == 0) {
            // If there's no remainder, just show the whole number
            textMixed.setText(String.valueOf(wholeNumber));
        } else { // Then just show the mixed fraction in the text field
            textMixed.setText(wholeNumber + " " + newNumerator + "/" + reducedDenominator);
        }
    }

} catch (NumberFormatException e) {
    // If any errors, tell user to enter valid integers
    JOptionPane.showMessageDialog(null, "Please enter valid integers.");
}
btnDecimal.doClick();
btnCalculate.doClick();  

    }//GEN-LAST:event_btnMixedActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        
        //these code statements just make it easier for the user to enter a new
        //value incase they dont want to manually clear each field 
          textNumerator.setText("");
        textDenominator.setText("");
        textMixed.setText("");
        textResult.setText("");
        textDecimal.setText("");
        textNumerator.setBorder(defaultBorder);//this also resets the border colors
    textDenominator.setBorder(defaultBorder);//this resets the border colors 
    }//GEN-LAST:event_btnClearActionPerformed
    
    private void btnStepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStepsActionPerformed
        
        //Now this here is a new feature I added which allows the user to see 
        //the steps taken to how their reduced fraction came to be!
        
  try {
    // This function just checks if the reduction has been performed
    // so that the user doesn't ultimately go to steps it first calculates
    // and then if they want to know how that happened, they go to steps
    if (!isReduced) {
        JOptionPane.showMessageDialog(null, "Please click the Reduce button first to reduce the fraction.");
        return; // Exit the method if reduction has not been performed
    }

    // This function checks if the numerator or denominator fields are empty
    if (textNumerator.getText().isEmpty() || textDenominator.getText().isEmpty()) {
        // if it is, show user a message 
        JOptionPane.showMessageDialog(null, "Please enter both a numerator and a denominator first.");
        return; // Then just exit the method
    }

    // These functions just get the numerator and denominator from the text fields
    int numerator = Integer.parseInt(textNumerator.getText());
    int denominator = Integer.parseInt(textDenominator.getText());

    // This makes sure that the denominator is not zero
    if (denominator == 0) {
        // if it is, make sure the user knows
        JOptionPane.showMessageDialog(null, "Denominator cannot be zero.");
        return; // Then just exit the method
    }

    // Calculate the GCD and show the steps 
    int gcd = calculateGCD(numerator, denominator);
    // Use a string builder here to establish it
    StringBuilder steps = new StringBuilder();
    // These following lines are the steps to take to reduce a fraction 
    // they are shown as statements followed by the inputs of the user and then
    // the program calculates the GCD and shows the final reduced answer as well

    // see if the fraction is negative
    boolean isNegativeFraction = (numerator < 0) ^ (denominator < 0); // XOR to check if signs differ

    //This is the output print lines
    steps.append("Steps to reduce the fraction " + numerator + "/" + denominator + ":\n\n");
    steps.append("1. Find the GCD of " + numerator + " and " + denominator + ":\n");
    steps.append("   - The GCD is: " + gcd + "\n");
    steps.append("2. Divide both the numerator and the denominator by the GCD:\n");

    //This will adjust for negative fractions
    int reducedNumerator = numerator / gcd;
    int reducedDenominator = denominator / gcd;

    if (isNegativeFraction) {
        // Make the numerator negative for display purposes
        reducedNumerator = Math.abs(reducedNumerator) * -1; //make sure the reduced numerator is negative
    }

    steps.append("   - Reduced Numerator: " + reducedNumerator + "\n"); // Like here it divides by gcd
    steps.append("   - Reduced Denominator: " + Math.abs(reducedDenominator) + "\n"); // Always display denominator as positive
    steps.append("3. Therefore, the reduced fraction is: " + reducedNumerator + "/" + Math.abs(reducedDenominator) + "\n");

    // This just opens a window for the user to see the steps so it doesn't 
    JOptionPane.showMessageDialog(null, steps.toString(), "Reduction Steps", JOptionPane.INFORMATION_MESSAGE);
    // This is a very useful functionality, where basically if the user 
    // clicks let's say the show steps without reducing the fraction, it'll 
    // still update all of the fields to do it
    btnMixed.doClick();
    btnDecimal.doClick();
    btnCalculate.doClick();
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Please enter valid integers.");
}
    }//GEN-LAST:event_btnStepsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FractionReducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FractionReducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FractionReducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FractionReducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FractionReducer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDecimal;
    private javax.swing.JButton btnMixed;
    private javax.swing.JButton btnSteps;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField textDecimal;
    private javax.swing.JTextField textDenominator;
    private javax.swing.JTextField textMixed;
    private javax.swing.JTextField textNumerator;
    private javax.swing.JTextField textResult;
    // End of variables declaration//GEN-END:variables
}
